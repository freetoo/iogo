// Code generated by protoc-gen-go. DO NOT EDIT.
// source: session/Session.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	session/Session.proto

It has these top-level messages:
	LoginRequest
	LoginReply
	LogoutRequest
	LogoutReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type LoginRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	PassWord string `protobuf:"bytes,2,opt,name=PassWord" json:"PassWord,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto1.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LoginRequest) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

type LoginReply struct {
	Flag     int32  `protobuf:"varint,1,opt,name=Flag" json:"Flag,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	Lease    int32  `protobuf:"varint,3,opt,name=Lease" json:"Lease,omitempty"`
	Interval int32  `protobuf:"varint,4,opt,name=Interval" json:"Interval,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto1.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginReply) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *LoginReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginReply) GetLease() int32 {
	if m != nil {
		return m.Lease
	}
	return 0
}

func (m *LoginReply) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type LogoutRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *LogoutRequest) Reset()                    { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string            { return proto1.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()               {}
func (*LogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LogoutRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type LogoutReply struct {
	Message string `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
}

func (m *LogoutReply) Reset()                    { *m = LogoutReply{} }
func (m *LogoutReply) String() string            { return proto1.CompactTextString(m) }
func (*LogoutReply) ProtoMessage()               {}
func (*LogoutReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LogoutReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*LoginRequest)(nil), "proto.LoginRequest")
	proto1.RegisterType((*LoginReply)(nil), "proto.LoginReply")
	proto1.RegisterType((*LogoutRequest)(nil), "proto.LogoutRequest")
	proto1.RegisterType((*LogoutReply)(nil), "proto.LogoutReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Session service

type SessionClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
}

type sessionClient struct {
	cc *grpc.ClientConn
}

// iogo do
// func NewSessionClient(cc *grpc.ClientConn) SessionClient {
// 	return &sessionClient{cc}
// }

func (c *sessionClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/proto.Session/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Session service

type SessionServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
}

// iogo do
// func RegisterSessionServer(s *grpc.Server, srv SessionServer) {
// 	s.RegisterService(&_Session_serviceDesc, srv)
// }

func _Session_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Session/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Session_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Session_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session/Session.proto",
}

// Client API for Account service

type AccountClient interface {
	Login(ctx context.Context, opts ...grpc.CallOption) (Account_LoginClient, error)
	LoginA(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (Account_LoginAClient, error)
	LoginB(ctx context.Context, opts ...grpc.CallOption) (Account_LoginBClient, error)
	LoginC(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
}

type accountClient struct {
	cc *grpc.ClientConn
}

// iogo do
// func NewAccountClient(cc *grpc.ClientConn) AccountClient {
// 	return &accountClient{cc}
// }

func (c *accountClient) Login(ctx context.Context, opts ...grpc.CallOption) (Account_LoginClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Account_serviceDesc.Streams[0], c.cc, "/proto.Account/Login", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountLoginClient{stream}
	return x, nil
}

type Account_LoginClient interface {
	Send(*LoginRequest) error
	Recv() (*LoginReply, error)
	grpc.ClientStream
}

type accountLoginClient struct {
	grpc.ClientStream
}

func (x *accountLoginClient) Send(m *LoginRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accountLoginClient) Recv() (*LoginReply, error) {
	m := new(LoginReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountClient) LoginA(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (Account_LoginAClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Account_serviceDesc.Streams[1], c.cc, "/proto.Account/LoginA", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountLoginAClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Account_LoginAClient interface {
	Recv() (*LoginReply, error)
	grpc.ClientStream
}

type accountLoginAClient struct {
	grpc.ClientStream
}

func (x *accountLoginAClient) Recv() (*LoginReply, error) {
	m := new(LoginReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountClient) LoginB(ctx context.Context, opts ...grpc.CallOption) (Account_LoginBClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Account_serviceDesc.Streams[2], c.cc, "/proto.Account/LoginB", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountLoginBClient{stream}
	return x, nil
}

type Account_LoginBClient interface {
	Send(*LoginRequest) error
	CloseAndRecv() (*LoginReply, error)
	grpc.ClientStream
}

type accountLoginBClient struct {
	grpc.ClientStream
}

func (x *accountLoginBClient) Send(m *LoginRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accountLoginBClient) CloseAndRecv() (*LoginReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LoginReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountClient) LoginC(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/proto.Account/LoginC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountServer interface {
	Login(Account_LoginServer) error
	LoginA(*LoginRequest, Account_LoginAServer) error
	LoginB(Account_LoginBServer) error
	LoginC(context.Context, *LoginRequest) (*LoginReply, error)
}

// iogo do
// func RegisterAccountServer(s *grpc.Server, srv AccountServer) {
// 	s.RegisterService(&_Account_serviceDesc, srv)
// }

func _Account_Login_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccountServer).Login(&accountLoginServer{stream})
}

type Account_LoginServer interface {
	Send(*LoginReply) error
	Recv() (*LoginRequest, error)
	grpc.ServerStream
}

type accountLoginServer struct {
	grpc.ServerStream
}

func (x *accountLoginServer) Send(m *LoginReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accountLoginServer) Recv() (*LoginRequest, error) {
	m := new(LoginRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Account_LoginA_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoginRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountServer).LoginA(m, &accountLoginAServer{stream})
}

type Account_LoginAServer interface {
	Send(*LoginReply) error
	grpc.ServerStream
}

type accountLoginAServer struct {
	grpc.ServerStream
}

func (x *accountLoginAServer) Send(m *LoginReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Account_LoginB_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccountServer).LoginB(&accountLoginBServer{stream})
}

type Account_LoginBServer interface {
	SendAndClose(*LoginReply) error
	Recv() (*LoginRequest, error)
	grpc.ServerStream
}

type accountLoginBServer struct {
	grpc.ServerStream
}

func (x *accountLoginBServer) SendAndClose(m *LoginReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accountLoginBServer) Recv() (*LoginRequest, error) {
	m := new(LoginRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Account_LoginC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).LoginC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Account/LoginC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).LoginC(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Account_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginC",
			Handler:    _Account_LoginC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Login",
			Handler:       _Account_Login_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "LoginA",
			Handler:       _Account_LoginA_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LoginB",
			Handler:       _Account_LoginB_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "session/Session.proto",
}

func init() { proto1.RegisterFile("session/Session.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x4d, 0xda, 0x24, 0x3a, 0xfe, 0x01, 0x47, 0x85, 0xd0, 0x8b, 0xb2, 0x17, 0x7b, 0xaa,
	0x1a, 0xf5, 0x26, 0x42, 0x6b, 0x11, 0x03, 0x51, 0x24, 0x1e, 0x7a, 0x5e, 0xeb, 0x12, 0x8b, 0x71,
	0x37, 0x66, 0x37, 0x42, 0x5f, 0xc7, 0x27, 0xf3, 0x51, 0x24, 0x93, 0x4d, 0xa9, 0xb7, 0xf6, 0xb4,
	0xf3, 0x7d, 0x33, 0x3f, 0xe6, 0xdb, 0x81, 0x23, 0x2d, 0xb4, 0x9e, 0x29, 0x79, 0xf6, 0xd2, 0xbc,
	0x83, 0xa2, 0x54, 0x46, 0xa1, 0x47, 0x0f, 0xbb, 0x85, 0x9d, 0x44, 0x65, 0x33, 0x99, 0x8a, 0xaf,
	0x4a, 0x68, 0x83, 0x08, 0xdd, 0x27, 0xfe, 0x29, 0x42, 0xe7, 0xc4, 0xe9, 0x6f, 0xa5, 0x54, 0x63,
	0x0f, 0x36, 0x9f, 0xb9, 0xd6, 0x13, 0x55, 0xbe, 0x85, 0x2e, 0xf9, 0x0b, 0xcd, 0xde, 0x01, 0x2c,
	0x5f, 0xe4, 0xf3, 0x9a, 0xbe, 0xcf, 0x79, 0x46, 0xb4, 0x97, 0x52, 0x8d, 0x87, 0xe0, 0x19, 0xf5,
	0x21, 0xa4, 0x45, 0x1b, 0x51, 0xbb, 0x89, 0xe0, 0x5a, 0x84, 0x1d, 0x1a, 0x6d, 0x44, 0xbd, 0x29,
	0x96, 0x46, 0x94, 0xdf, 0x3c, 0x0f, 0xbb, 0xd4, 0x58, 0x68, 0x76, 0x0c, 0xbb, 0x89, 0xca, 0x54,
	0x65, 0xda, 0xa8, 0x7b, 0xe0, 0xc6, 0x63, 0x1b, 0xd4, 0x8d, 0xc7, 0xec, 0x14, 0xb6, 0xdb, 0x81,
	0x3a, 0x4b, 0x08, 0xc1, 0xa3, 0xd0, 0x9a, 0x67, 0xed, 0x67, 0x5a, 0x19, 0xdd, 0x40, 0x60, 0x6f,
	0x81, 0x17, 0xe0, 0x51, 0x7c, 0x3c, 0x68, 0xce, 0x32, 0x58, 0x3e, 0x46, 0x6f, 0xff, 0xbf, 0x59,
	0xe4, 0x73, 0xb6, 0x11, 0xfd, 0x3a, 0x10, 0x0c, 0xa7, 0x53, 0x55, 0x49, 0x83, 0xd7, 0x6b, 0xe3,
	0x7d, 0xe7, 0xdc, 0xc1, 0x2b, 0xf0, 0xc9, 0x1b, 0xae, 0xce, 0x2d, 0x51, 0xa3, 0x75, 0xb6, 0x61,
	0x64, 0xa9, 0xbb, 0xd5, 0xa9, 0x91, 0xff, 0xe3, 0x76, 0x1e, 0x92, 0xc9, 0xab, 0x4f, 0xbd, 0xcb,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96, 0x73, 0x5d, 0x7a, 0x43, 0x02, 0x00, 0x00,
}
